AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: "GOV.UK Sign In Authentication Smoke Tests Infrastructure"

Parameters:
  VpcStackName:
    Description: "The VPC stack name in the account"
    Type: "String"

  CodeSigningConfigArn:
    Type: String
    Description: Asserts that lambdas are signed when deployed.
    Default: "none"

  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "nonenonenonenonenone"

  SlackHookUri:
    Type: String
    Description: Webhook URI for Slack notifications
    NoEcho: true

  Environment:
    Description: "The name of the environment to deploy to"
    Type: "String"
    AllowedValues:
      - build
      - staging
      - production
      - integration

  LoggingSubscriptionEndpointArn:
    Type: String
    Description: The ARN of the subscription endpoint to send logs to splunk
    Default: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython-2"

Conditions:
  UseCodeSigning: !Not [!Equals [!Ref CodeSigningConfigArn, none]]
  UsePermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, none]]
  IsProduction: !Equals [!Ref Environment, "production"]
  Isnotbuild: !Not [!Equals [!Ref Environment, "build"]]
  IsnotIntegration: !Not [!Equals [!Ref Environment, "integration"]]
  MetricAlarmsEnabled: !Equals [!Ref MetricAlarmsEnabled, "true"]
  HeartbeatPingEnabled: !Equals [!Ref HeartbeatPingEnabled, "true"]

Mappings:
  EnvironmentConfiguration:
    build:
      cloudwatchLogRetentionInDays: 30
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      SlackChannelId: C07TMK4CGH2
    staging:
      cloudwatchLogRetentionInDays: 30
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      SlackChannelId: C07TMK4CGH2
    integration:
      cloudwatchLogRetentionInDays: 30
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      SlackChannelId: C07TMK4CGH2
    production:
      cloudwatchLogRetentionInDays: 30
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
      SlackChannelId: C07TMK4CGH2

Globals:
  Function:
    CodeSigningConfigArn:
      !If [UseCodeSigning, !Ref CodeSigningConfigArn, !Ref AWS::NoValue]
    KmsKeyArn: !GetAtt KmsKey.Arn
    PermissionsBoundary:
      !If [UsePermissionsBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
    Runtime: nodejs20.x
    Timeout: 30
    MemorySize: 512
    Architectures:
      - arm64
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CONNECTION_BASE_URL: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CLUSTER_ID: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_TENANT: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}"
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"
    Layers:
      - !Sub
        - "{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}"
        - SecretArn:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              dynatraceSecretArn,
            ]

Resources:
  # S3 Buckets
  SmokeTestArtefactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-smoke-new-test-artefacts"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: smoke-tests

  SmokeTestSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-smoke-new-test-source"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: smoke-tests

  # IAM Roles and Policies
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: smoke-tests

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key that Lambda uses to encrypt and decrypt function's environment variables and logs
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  KmsKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub
        - "alias/${Env}-smoke-test-lambda-main-kms-alias"
        - Env: !Ref Environment
      TargetKeyId: !Ref KmsKey

  # Alert Lambda Function
  AlertsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-alerts"
      CodeUri: ./dist/alert.zip
      Handler: alerts.handler
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DEPLOY_ENVIRONMENT: !Ref Environment
          SLACK_CHANNEL_ID: !Ref SlackChannelId
      LoggingConfig:
        LogGroup: !Ref AlertsLambdaFunctionLogGroup
